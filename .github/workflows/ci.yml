name: ci

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v2

      - name: Run agilab tests with coverage
        run: |
          set -e
          mkdir -p test-results
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agilab --cov-report=xml:coverage-agilab.xml \
            --junitxml=test-results/junit.xml \
            src/agilab/test || true

      - name: Run agi-env tests with coverage
        run: |
          set -e
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agi_env --cov-report=xml:coverage-agi-env.xml \
            src/agilab/core/agi-env/test || true

      - name: Run agi-node tests with coverage
        run: |
          set -e
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agi_node --cov-report=xml:coverage-agi-node.xml \
            src/agilab/core/test || true

      - name: Run agi-cluster tests with coverage
        run: |
          set -e
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agi_cluster --cov-report=xml:coverage-agi-cluster.xml \
            src/agilab/core/test || true

      - name: Run agi-core tests with coverage
        run: |
          set -e
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agi_core --cov-report=xml:coverage-agi-core.xml \
            src/agilab/core/test || true

      - name: Upload JUnit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python-version }}
          path: test-results/junit.xml
          if-no-files-found: ignore

      - name: Upload agilab coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agilab.xml
          flags: agilab
          fail_ci_if_error: false

      - name: Upload agi-env coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agi-env.xml
          flags: agi-env
          fail_ci_if_error: false

      - name: Upload agi-node coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agi-node.xml
          flags: agi-node
          fail_ci_if_error: false

      - name: Upload agi-cluster coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agi-cluster.xml
          flags: agi-cluster
          fail_ci_if_error: false

      - name: Upload agi-core coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agi-core.xml
          flags: agi-core
          fail_ci_if_error: false

      - name: Generate coverage badge data
        if: matrix.python-version == '3.13'
        run: |
          python <<'PY'
import json
import xml.etree.ElementTree as ET
from pathlib import Path

COVERAGE_FILES = {
    "agilab": Path("coverage-agilab.xml"),
    "agi-env": Path("coverage-agi-env.xml"),
    "agi-node": Path("coverage-agi-node.xml"),
    "agi-core": Path("coverage-agi-core.xml"),
    "agi-cluster": Path("coverage-agi-cluster.xml"),
}

def select_color(percent: float) -> str:
    if percent >= 90:
        return "brightgreen"
    if percent >= 75:
        return "green"
    if percent >= 60:
        return "yellowgreen"
    if percent >= 45:
        return "yellow"
    if percent >= 30:
        return "orange"
    return "red"

badges_dir = Path("badges")
badges_dir.mkdir(exist_ok=True)

for pkg_name, xml_path in COVERAGE_FILES.items():
    if not xml_path.exists():
        continue
    root = ET.parse(xml_path).getroot()
    percent = round(float(root.attrib.get("line-rate", "0.0")) * 100, 1)
    badge = {
        "schemaVersion": 1,
        "label": "coverage",
        "message": f"{percent:.1f}%",
        "color": select_color(percent),
    }
    target = badges_dir / f"{pkg_name}.json"
    target.write_text(json.dumps(badge, indent=2) + "\n", encoding="utf-8")
PY

      - name: Publish coverage badges
        if: matrix.python-version == '3.13'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: badges
          publish_branch: badge-data
          force_orphan: true
