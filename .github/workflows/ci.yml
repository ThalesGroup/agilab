name: ci

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v2

      - name: Run agilab tests with coverage
        run: |
          set -e
          mkdir -p test-results
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agilab --cov-report=xml:coverage-agilab.xml \
            --junitxml=test-results/junit.xml \
            src/agilab/test || true

      - name: Run agi-env tests with coverage
        run: |
          set -e
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agi_env --cov-report=xml:coverage-agi-env.xml \
            src/agilab/core/agi-env/test || true

      - name: Run agi-node tests with coverage
        run: |
          set -e
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agi_node --cov-report=xml:coverage-agi-node.xml \
            src/agilab/core/test || true

      - name: Run agi-cluster tests with coverage
        run: |
          set -e
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agi_cluster --cov-report=xml:coverage-agi-cluster.xml \
            src/agilab/core/test || true

      - name: Run agi-core tests with coverage
        run: |
          set -e
          uv run pytest -q --maxfail=1 --disable-warnings \
            --cov=agi_core --cov-report=xml:coverage-agi-core.xml \
            src/agilab/core/test || true

      - name: Upload JUnit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python-version }}
          path: test-results/junit.xml
          if-no-files-found: ignore

      - name: Upload agilab coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agilab.xml
          flags: agilab
          fail_ci_if_error: false

      - name: Upload agi-env coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agi-env.xml
          flags: agi-env
          fail_ci_if_error: false

      - name: Upload agi-node coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agi-node.xml
          flags: agi-node
          fail_ci_if_error: false

      - name: Upload agi-cluster coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agi-cluster.xml
          flags: agi-cluster
          fail_ci_if_error: false

      - name: Upload agi-core coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-agi-core.xml
          flags: agi-core
          fail_ci_if_error: false

      - name: Generate coverage badge data
        if: matrix.python-version == '3.13' && github.ref == 'refs/heads/main'
        run: |
          uv run --group dev coverage json -o coverage-summary.json
          python <<'PY'
import json
from pathlib import Path

summary = json.loads(Path('coverage-summary.json').read_text())
percent = float(summary['totals']['percent_covered'] or 0.0)

def pick_color(value: float) -> str:
    if value >= 90:
        return 'brightgreen'
    if value >= 75:
        return 'green'
    if value >= 60:
        return 'yellowgreen'
    if value >= 45:
        return 'yellow'
    if value >= 30:
        return 'orange'
    return 'red'

badge = {
    'schemaVersion': 1,
    'label': 'coverage',
    'message': f"{percent:.1f}%",
    'color': pick_color(percent),
}
Path('badges').mkdir(exist_ok=True)
Path('badges/coverage.json').write_text(json.dumps(badge, indent=2) + '\n')
PY

      - name: Publish coverage badge
        if: matrix.python-version == '3.13' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: badge-data
          publish_dir: badges
          force_orphan: true
