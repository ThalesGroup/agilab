import os
import shutil
import json
import time
import zipfile
from pathlib import Path
import ast
import re
import importlib
import streamlit as st
from agi_env.pagelib import get_about_content, render_logo, inject_theme
from agi_env.pagelib import (
    get_classes_name,
    get_fcts_and_attrs_name,
    get_templates,
    get_projects_zip,
    on_project_change,
    select_project,
    open_docs,
    render_logo,
    activate_mlflow
)
from pathspec import PathSpec
from pathspec.patterns import GitWildMatchPattern
from streamlit_modal import Modal
from code_editor import code_editor
from agi_env import AgiEnv, normalize_path
import astor
from typing import Any

class SourceExtractor(ast.NodeTransformer):
    def __init__(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_ClassDef(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_FunctionDef(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_AsyncFunctionDef(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_Assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_AnnAssign(self, *args: Any, **kwargs: Any) -> Any: ...

def process_files(*args: Any, **kwargs: Any) -> Any: ...

def replace_content(*args: Any, **kwargs: Any) -> Any: ...

def read_gitignore(*args: Any, **kwargs: Any) -> Any: ...

def clean_project(*args: Any, **kwargs: Any) -> Any: ...

def handle_export_project(*args: Any, **kwargs: Any) -> Any: ...

def import_project(*args: Any, **kwargs: Any) -> Any: ...

def clone_directory(*args: Any, **kwargs: Any) -> Any: ...

def _cleanup_rename(*args: Any, **kwargs: Any) -> Any: ...

class ContentRenamer(ast.NodeTransformer):
    def __init__(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_Name(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_Attribute(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_FunctionDef(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_ClassDef(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_arg(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_Global(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_nonlocal(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_Assign(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_AnnAssign(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_For(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_Import(self, *args: Any, **kwargs: Any) -> Any: ...
    def visit_ImportFrom(self, *args: Any, **kwargs: Any) -> Any: ...

def render_code_editor(*args: Any, **kwargs: Any) -> Any: ...

def handle_editing(*args: Any, **kwargs: Any) -> Any: ...

def handle_project_selection(*args: Any, **kwargs: Any) -> Any: ...

def _render_python_env(*args: Any, **kwargs: Any) -> Any: ...

def _render_uv_env(*args: Any, **kwargs: Any) -> Any: ...

def _render_manager(*args: Any, **kwargs: Any) -> Any: ...

def _render_worker(*args: Any, **kwargs: Any) -> Any: ...

def _render_gitignore(*args: Any, **kwargs: Any) -> Any: ...

def _render_app_settings(*args: Any, **kwargs: Any) -> Any: ...

def _render_app_args_module(*args: Any, **kwargs: Any) -> Any: ...

def _render_readme(*args: Any, **kwargs: Any) -> Any: ...

def _render_args_ui(*args: Any, **kwargs: Any) -> Any: ...

def _render_pre_prompt(*args: Any, **kwargs: Any) -> Any: ...

def handle_project_creation(*args: Any, **kwargs: Any) -> Any: ...

def normalize_project_name(*args: Any, **kwargs: Any) -> Any: ...

def handle_project_rename(*args: Any, **kwargs: Any) -> Any: ...

def handle_project_delete(*args: Any, **kwargs: Any) -> Any: ...

def handle_project_import(*args: Any, **kwargs: Any) -> Any: ...

def page(*args: Any, **kwargs: Any) -> Any: ...

def main(*args: Any, **kwargs: Any) -> Any: ...
