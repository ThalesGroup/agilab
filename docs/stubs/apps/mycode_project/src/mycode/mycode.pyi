"""Minimal manager implementation for the mycode sample project."""

from __future__ import annotations
import logging
from pathlib import Path
from typing import Any, List, Tuple
from agi_node.agi_dispatcher import BaseWorker, WorkDispatcher
from .mycode_args import ArgsOverrides, MycodeArgs, dump_args, ensure_defaults, load_args, merge_args

logger = logging.getLogger(__name__)

class Mycode(BaseWorker):
    def __init__(self, *args: Any, **kwargs: Any) -> Any: ...
    def from_toml(cls, *args: Any, **kwargs: Any) -> Any: ...
    def to_toml(self, *args: Any, **kwargs: Any) -> Any: ...
    def as_dict(self) -> Any: ...
    def pool_init(*args: Any, **kwargs: Any) -> Any: ...
    def work_pool(self, *args: Any, **kwargs: Any) -> Any: ...
    def work_done(self, *args: Any, **kwargs: Any) -> Any: ...
    def stop(self) -> Any: ...
    def build_distribution(self) -> Any: ...
