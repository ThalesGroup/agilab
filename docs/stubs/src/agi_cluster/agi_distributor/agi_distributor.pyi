"""Cluster workplan utilities for distributing AGILab workloads."""

import traceback
from typing import Tuple, Set
from IPython.lib import backgroundjobs as bg
import asyncio
import getpass
import io
import os
import pickle
import random
import re
import shutil
import socket
import sys
import shlex
import time
import warnings
from copy import deepcopy
from datetime import timedelta
from ipaddress import ip_address as is_ip
from pathlib import Path
from tempfile import gettempdir
from typing import Any, Dict, List, Optional, Union
import sysconfig
from contextlib import redirect_stdout, redirect_stderr
import errno
import asyncssh
from asyncssh.process import ProcessError
from contextlib import asynccontextmanager
import humanize
import numpy as np
import polars as pl
import psutil
from dask.distributed import Client, wait
import json
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
import subprocess
import logging
import runpy
import tomlkit
from packaging.requirements import Requirement
from importlib.metadata import PackageNotFoundError, version as pkg_version
from agi_env import AgiEnv, normalize_path
from agi_node.agi_dispatcher import WorkDispatcher, BaseWorker

def _agi__version_missing_on_pypi(*args: Any, **kwargs: Any) -> Any: ...

_node_src = str(Path(sys.prefix).parents[1] / "agi-node/src")

logger = logging.getLogger(__name__)

_workers_default = {socket.gethostbyname("localhost"): 1}

class AGI:
    def __init__(self, *args: Any, **kwargs: Any) -> Any: ...
    def run(*args: Any, **kwargs: Any) -> Any: ...
    def serve(*args: Any, **kwargs: Any) -> Any: ...
    def _benchmark(*args: Any, **kwargs: Any) -> Any: ...
    def get_default_local_ip(*args: Any, **kwargs: Any) -> Any: ...
    def find_free_port(*args: Any, **kwargs: Any) -> Any: ...
    def _get_scheduler(*args: Any, **kwargs: Any) -> Any: ...
    def _get_stdout(*args: Any, **kwargs: Any) -> Any: ...
    def _read_stderr(*args: Any, **kwargs: Any) -> Any: ...
    def send_file(*args: Any, **kwargs: Any) -> Any: ...
    def send_files(*args: Any, **kwargs: Any) -> Any: ...
    def _remove_dir_forcefully(*args: Any, **kwargs: Any) -> Any: ...
    def _kill(*args: Any, **kwargs: Any) -> Any: ...
    def _clean_dirs_local(*args: Any, **kwargs: Any) -> Any: ...
    def _clean_dirs(*args: Any, **kwargs: Any) -> Any: ...
    def _clean_nodes(*args: Any, **kwargs: Any) -> Any: ...
    def _clean_remote_procs(*args: Any, **kwargs: Any) -> Any: ...
    def _clean_remote_dirs(*args: Any, **kwargs: Any) -> Any: ...
    def _prepare_local_env(*args: Any, **kwargs: Any) -> Any: ...
    def _prepare_cluster_env(*args: Any, **kwargs: Any) -> Any: ...
    def _deploy_application(*args: Any, **kwargs: Any) -> Any: ...
    def _reset_deploy_state(*args: Any, **kwargs: Any) -> Any: ...
    def _hardware_supports_rapids(*args: Any, **kwargs: Any) -> Any: ...
    def _deploy_local_worker(*args: Any, **kwargs: Any) -> Any: ...
    def _deploy_remote_worker(*args: Any, **kwargs: Any) -> Any: ...
    def _should_install_pip(*args: Any, **kwargs: Any) -> Any: ...
    def _uninstall_modules(*args: Any, **kwargs: Any) -> Any: ...
    def _format_elapsed(*args: Any, **kwargs: Any) -> Any: ...
    def _venv_todo(*args: Any, **kwargs: Any) -> Any: ...
    def install(*args: Any, **kwargs: Any) -> Any: ...
    def update(*args: Any, **kwargs: Any) -> Any: ...
    def get_distrib(*args: Any, **kwargs: Any) -> Any: ...
    def distribute(*args: Any, **kwargs: Any) -> Any: ...
    def _start_scheduler(*args: Any, **kwargs: Any) -> Any: ...
    def _detect_export_cmd(*args: Any, **kwargs: Any) -> Any: ...
    def _start(*args: Any, **kwargs: Any) -> Any: ...
    def _sync(*args: Any, **kwargs: Any) -> Any: ...
    def _build_lib_local(*args: Any, **kwargs: Any) -> Any: ...
    def _build_lib_remote(*args: Any, **kwargs: Any) -> Any: ...
    def _run(*args: Any, **kwargs: Any) -> Any: ...
    def _distribute(*args: Any, **kwargs: Any) -> Any: ...
    def _main(*args: Any, **kwargs: Any) -> Any: ...
    def _clean_job(*args: Any, **kwargs: Any) -> Any: ...
    def _scale_cluster(*args: Any, **kwargs: Any) -> Any: ...
    def _stop(*args: Any, **kwargs: Any) -> Any: ...
    def _calibration(*args: Any, **kwargs: Any) -> Any: ...
    def _train_capacity(*args: Any, **kwargs: Any) -> Any: ...
    def _update_capacity(*args: Any, **kwargs: Any) -> Any: ...
    def _exec_bg(*args: Any, **kwargs: Any) -> Any: ...
    def get_ssh_connection(*args: Any, **kwargs: Any) -> Any: ...
    def exec_ssh(*args: Any, **kwargs: Any) -> Any: ...
    def exec_ssh_async(*args: Any, **kwargs: Any) -> Any: ...
    def _close_all_connections(*args: Any, **kwargs: Any) -> Any: ...
