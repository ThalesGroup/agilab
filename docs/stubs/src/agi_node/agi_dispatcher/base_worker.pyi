"""node module

    Auteur: Jean-Pierre Morard"""

import abc
import asyncio
import getpass
import inspect
import io
import json
import os
import shutil
import stat
import subprocess
import sys
import tempfile
import threading
import time
import traceback
import warnings
from pathlib import Path, PureWindowsPath
from types import SimpleNamespace
from typing import Any, Callable, ClassVar, Dict, List, Optional, Union
import numpy as np
from distutils.sysconfig import get_python_lib
import psutil
import humanize
import datetime
import logging
from copy import deepcopy
from agi_env import AgiEnv, normalize_path

logger = logging.getLogger(__name__)

class BaseWorker(abc.ABC):
    def _require_args_helper(cls, *args: Any, **kwargs: Any) -> Any: ...
    def _remap_managed_pc_path(cls, *args: Any, **kwargs: Any) -> Any: ...
    def _apply_managed_pc_path_overrides(cls, *args: Any, **kwargs: Any) -> Any: ...
    def _apply_managed_pc_paths(self, *args: Any, **kwargs: Any) -> Any: ...
    def prepare_output_dir(self, *args: Any, **kwargs: Any) -> Any: ...
    def setup_args(self, *args: Any, **kwargs: Any) -> Any: ...
    def from_toml(cls, *args: Any, **kwargs: Any) -> Any: ...
    def to_toml(self, *args: Any, **kwargs: Any) -> Any: ...
    def as_dict(self, *args: Any, **kwargs: Any) -> Any: ...
    def _extend_payload(self, *args: Any, **kwargs: Any) -> Any: ...
    def start(*args: Any, **kwargs: Any) -> Any: ...
    def stop(self) -> Any: ...
    def loop(*args: Any, **kwargs: Any) -> Any: ...
    def break_loop(*args: Any, **kwargs: Any) -> Any: ...
    def expand_and_join(*args: Any, **kwargs: Any) -> Any: ...
    def expand(*args: Any, **kwargs: Any) -> Any: ...
    def normalize_data_uri(*args: Any, **kwargs: Any) -> Any: ...
    def _join(*args: Any, **kwargs: Any) -> Any: ...
    def _get_logs_and_result(*args: Any, **kwargs: Any) -> Any: ...
    def _exec(*args: Any, **kwargs: Any) -> Any: ...
    def _log_import_error(*args: Any, **kwargs: Any) -> Any: ...
    def _load_module(*args: Any, **kwargs: Any) -> Any: ...
    def _load_manager(*args: Any, **kwargs: Any) -> Any: ...
    def _load_worker(*args: Any, **kwargs: Any) -> Any: ...
    def _is_cython_installed(*args: Any, **kwargs: Any) -> Any: ...
    def _run(*args: Any, **kwargs: Any) -> Any: ...
    def _onerror(*args: Any, **kwargs: Any) -> Any: ...
    def _new(*args: Any, **kwargs: Any) -> Any: ...
    def _get_worker_info(*args: Any, **kwargs: Any) -> Any: ...
    def _build(*args: Any, **kwargs: Any) -> Any: ...
    def _do_works(*args: Any, **kwargs: Any) -> Any: ...
