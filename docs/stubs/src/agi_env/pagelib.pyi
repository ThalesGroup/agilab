import re
import json
import glob
from pathlib import Path
from functools import lru_cache
import pandas as pd
import os
import subprocess
import streamlit as st
import random
import socket
import base64
import runpy
from typing import Dict, Optional
import sys
import logging
import webbrowser
from sqlalchemy import false
import ast
from typing import List, Optional, Union
from typing import Any

custom_css = (
    "<style> .stButton > button { max-width: 150px;  /* Adjust the max-width as needed */"
    "font-size: 14px;  /* Adjust the font-size as needed */)"
    "white-space: nowrap;  /* Prevent text from wrapping */"
    "overflow: hidden;  /* Hide overflow text */"
    "text-overflow: ellipsis;  /* Show ellipsis for overflow text */} "
    " .stToggleSwitch label {"
    "max-width: 150px;  /* Adjust the max-width as needed */"
    "font-size: 14px;  /* Adjust the font-size as needed */"
    "white-space: nowrap;  /* Prevent text from wrapping */"
    "overflow: hidden;  /* Hide overflow text */"
    "text-overflow: ellipsis;  /* Show ellipsis for overflow text */"
    "display: inline-block;} </style>"
)

class JumpToMain(Exception):
    ...

def log(*args: Any, **kwargs: Any) -> Any: ...

def run(*args: Any, **kwargs: Any) -> Any: ...

_DOCS_ALREADY_OPENED = False

def _resolve_docs_path(*args: Any, **kwargs: Any) -> Any: ...

def open_docs(*args: Any, **kwargs: Any) -> Any: ...

def get_base64_of_image(*args: Any, **kwargs: Any) -> Any: ...

def get_css_text(*args: Any, **kwargs: Any) -> Any: ...

def inject_theme(*args: Any, **kwargs: Any) -> Any: ...

def _read_version_from_pyproject(*args: Any, **kwargs: Any) -> Any: ...

def _detect_agilab_version(*args: Any, **kwargs: Any) -> Any: ...

def render_logo(*args: Any, **kwargs: Any) -> Any: ...

def subproc(*args: Any, **kwargs: Any) -> Any: ...

def get_projects_zip(*args: Any, **kwargs: Any) -> Any: ...

def get_templates(*args: Any, **kwargs: Any) -> Any: ...

def get_about_content(*args: Any, **kwargs: Any) -> Any: ...

def init_custom_ui(*args: Any, **kwargs: Any) -> Any: ...

def on_project_change(*args: Any, **kwargs: Any) -> Any: ...

def is_port_in_use(*args: Any, **kwargs: Any) -> Any: ...

def get_random_port(*args: Any, **kwargs: Any) -> Any: ...

def find_files(*args: Any, **kwargs: Any) -> Any: ...

def get_custom_buttons(*args: Any, **kwargs: Any) -> Any: ...

def get_info_bar(*args: Any, **kwargs: Any) -> Any: ...

def export_df(*args: Any, **kwargs: Any) -> Any: ...

def get_fcts_and_attrs_name(*args: Any, **kwargs: Any) -> Any: ...

def get_classes_name(*args: Any, **kwargs: Any) -> Any: ...

def get_class_methods(*args: Any, **kwargs: Any) -> Any: ...

def run_agi(*args: Any, **kwargs: Any) -> Any: ...

def run_lab(*args: Any, **kwargs: Any) -> Any: ...

def cached_load_df(*args: Any, **kwargs: Any) -> Any: ...

def get_first_match_and_keyword(*args: Any, **kwargs: Any) -> Any: ...

def load_df(*args: Any, **kwargs: Any) -> Any: ...

def save_csv(*args: Any, **kwargs: Any) -> Any: ...

def get_df_index(*args: Any, **kwargs: Any) -> Any: ...

def list_views(*args: Any, **kwargs: Any) -> Any: ...

def read_file_lines(*args: Any, **kwargs: Any) -> Any: ...

def handle_go_action(*args: Any, **kwargs: Any) -> Any: ...

def update_views(*args: Any, **kwargs: Any) -> Any: ...

def initialize_csv_files(*args: Any, **kwargs: Any) -> Any: ...

def update_var(*args: Any, **kwargs: Any) -> Any: ...

def update_datadir(*args: Any, **kwargs: Any) -> Any: ...

def select_project(*args: Any, **kwargs: Any) -> Any: ...

def open_new_tab(*args: Any, **kwargs: Any) -> Any: ...

def scan_dir(*args: Any, **kwargs: Any) -> Any: ...

def sidebar_views(*args: Any, **kwargs: Any) -> Any: ...

def on_df_change(*args: Any, **kwargs: Any) -> Any: ...

def activate_mlflow(*args: Any, **kwargs: Any) -> Any: ...

def _focus_existing_docs_tab(*args: Any, **kwargs: Any) -> Any: ...
