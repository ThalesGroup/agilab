apps bounded pages
===================

AGILab ships a handful of prebuilt Streamlit bundles that you can expose from
the Explore catalogue or the home dashboard. Each bundle is a standalone
Streamlit project with its own ``pyproject.toml``/``.venv`` so the launcher spins
it up in an isolated interpreter. Add the module name to the
``[pages].view_module`` list in ``app_settings.toml`` (or use Explore → Configure)
and the page becomes available to every user of the project.

External pages can be added from a separate repository by running the
installer with ``-AppsRepository`` and pointing it at a repo containing
``apps-pages`` (or ``src/agilab/apps-pages``). The installer links missing
folders into ``src/agilab/apps-pages`` while leaving any existing non-link
folders (built-ins) as-is.

view_autoencoder_latenspace
---------------------------

Interactive dimensionality reduction playground powered by an autoencoder.

- Loads the dataframe exported from Execute and lets you pick the features to
  embed into latent space.
- Trains a configurable autoencoder (Keras) on the fly and visualises the
  latent space with barycentric projections using ``barviz``.
- Supports both categorical and continuous colouring, including automatic data
  normalisation and training/test splits.

view_barycentric
-----------------

Barycentric simplex visualisation for high-dimensional metrics.

- Uses the same ``barviz`` primitives as the autoencoder view but expects a set
  of aggregated KPI columns that should sum to one.
- Provides interactive controls to choose the variables plotted on the simplex
  and to re-centre the projection around a particular point.
- Handy for comparing relative contributions (for example cluster weights or
  class probabilities) across the exported dataset.

view_maps
----------

2D cartography dashboard focused on geolocated telemetry.

- Discovers datasets under ``${AGILAB_EXPORT_ABS}`` and lets you point at the
  CSV/parquet file to render.
- Requires latitude/longitude columns; optional value column drives the colour
  scale and can be toggled between discrete and continuous modes.
- Offers deterministic down-sampling, colour palette selection and mapbox
  basemap overlays to keep the view responsive with large datasets.

view_maps_3d
-------------

Deck.gl powered 3D cartography with optional beam overlays.

- Plots the selected dataset on a terrain surface (elevation tiles + satellite
  imagery) and supports multiple CSV sources (e.g. telemetry and beam
  footprints).
- Lets you colour by discrete categories, adjust extrusion heights and switch
  between plotly based scatter maps and 3D mesh layers.
- Generates random palettes when needed so each category stands out against the
  terrain background.

view_maps_network
------------------

Network topology explorer that synchronises geographic and graph views.

- Reads link definitions (``satcom_link``, ``optical_link``, ``legacy_link``, …)
  directly from the dataset and builds the associated edge list.
- Colours each link type consistently across the map, the 3D deck.gl layer and
  the accompanying plotly/networkx charts.
- Helpful to debug dynamic routing: filter by active links, inspect node
  trajectories and replay snapshots side by side.
